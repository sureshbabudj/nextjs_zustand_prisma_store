import Head from "next/head";
import styles from "../styles/Home.module.css";
import axios from "axios";
import Main from "../components/Main.component";
import { useEffect } from "react";
import { useStore } from "../store";

export async function getProductsData({
  size,
  page,
  selectedCategories,
  selectedSubcategories,
}) {
  try {
    let url = `http://localhost:3001/api/products?size=${size}&page=${page}`;

    if (selectedCategories.length > 0) {
      url += `&categories=${selectedCategories.join(",")}`;
    }

    if (selectedSubcategories.length > 0) {
      url += `&subcategories=${selectedSubcategories.join(",")}`;
    }

    const res = await fetch(url);
    if (!res.ok) {
      throw new Error("Failed to fetch products");
    }
    return await res.json();
  } catch (error) {
    console.error(error);
  }
}

export async function getServerSideProps(context) {
  const queryParams = context.query;
  const initialData = {
    selectedCategories: queryParams.categories
      ? queryParams.categories.split(",")
      : [],
    selectedSubcategories: queryParams.subcategories
      ? queryParams.subcategories.split(",")
      : [],
    page: queryParams.page ? parseInt(queryParams.page, 10) : 1,
    size: queryParams.size ? parseInt(queryParams.size, 10) : 10,
    queryParams,
    productsData: {
      products: [],
      totalCount: 0,
    },
    categories: {},
  };

  try {
    const response = await axios.get("http://localhost:3001/api/categories");
    initialData.categories = response.data;
  } catch (error) {
    console.error("Error fetching categories data:", error.message);
  }

  try {
    initialData.productsData = await getProductsData({
      size: initialData.size,
      page: initialData.page,
      selectedCategories: initialData.selectedCategories,
      selectedSubcategories: initialData.selectedSubcategories,
    });
  } catch (error) {
    console.error("Error fetching products data:", error.message);
  }

  return {
    props: {
      initialData,
    },
  };
}

export default function Home({ initialData }) {
  const {
    setQueryParams,
    setSelectedCategories,
    setSelectedSubcategories,
    setPage,
    setSize,
    setProductsData,
    setCategories,
  } = useStore((state) => state);

  const {
    queryParams,
    selectedCategories,
    selectedSubcategories,
    page,
    size,
    productsData,
    categories,
  } = initialData;

  useEffect(() => {
    setQueryParams(queryParams);
    setSelectedCategories(selectedCategories);
    setSelectedSubcategories(selectedSubcategories);
    setPage(page);
    setSize(size);
    setProductsData(productsData);
    setCategories(categories);
  }, [
    categories,
    page,
    productsData,
    queryParams,
    selectedCategories,
    selectedSubcategories,
    setCategories,
    setPage,
    setProductsData,
    setQueryParams,
    setSelectedCategories,
    setSelectedSubcategories,
    setSize,
    size,
  ]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Shop</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Main />
      <footer>Shop | Spike</footer>
    </div>
  );
}
